// Copyright 2021 Alexander Metzner.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generate

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"
	"unicode"
	"unicode/utf8"

	"golang.org/x/tools/imports"
)

const (
	// repoTemplateSrce contains the template source to generate a repo file.
	repoTemplateSrc = `
// This file has been generated by github.com/halimath/depot.
// Any changes will be overwritten when re-generating.

package	{{.Opts.RepoPackage}}

import (
	"context"

	"github.com/halimath/depot"
	"github.com/halimath/depot/query"
)

var (
	{{lcFirst .Opts.RepoName}}Cols  = query.Cols({{range .Mapping.Fields}}"{{.Column}}", {{end}})
	{{lcFirst .Opts.RepoName}}Table = query.Table("{{.Opts.TableName}}")
)

type {{.Opts.RepoName}} struct {
	db *depot.DB
}

func (r *{{.Opts.RepoName}}) Begin(ctx context.Context) (context.Context, error) {
	_, ctx, err := r.db.BeginTx(ctx)
	return ctx, err
}

func (r *{{.Opts.RepoName}}) Commit(ctx context.Context) error {
	tx := depot.MustGetTx(ctx)
	return tx.Commit()
}

func (r *{{.Opts.RepoName}}) Rollback(ctx context.Context) error {
	tx := depot.MustGetTx(ctx)
	return tx.Rollback()
}

func (r *{{.Opts.RepoName}}) fromValues(vals depot.Values) (*{{.Opts.EntityName}}, error) {
	var ok bool
	{{range .Mapping.Fields}}
		var {{toLower .Field}} {{.Type.Expr}}
		{{if .Opts.Nullable}}			
			if !vals.IsNull("{{.Column}}") {
				{{ .Type.AssignNonNil (toLower .Field) "ok" "vals" (printf "%q" .Column) }}				
			}
		{{else}}
			{{ .Type.AssignNonNil (toLower .Field) "ok" "vals" (printf "%q" .Column) }}			
		{{end}}
		
		if !ok {
			return nil, fmt.Errorf("failed to get {{.Column}} for {{$.Opts.EntityName}}: invalid value: %#v", vals["{{.Column}}"])
		}
	{{end}}
	return &{{.Opts.EntityName}}{
		{{range .Mapping.Fields}}{{.Field}}: {{toLower .Field}},
		{{end}}
	}, nil
}

func (r *{{.Opts.RepoName}}) find(ctx context.Context, clauses ...query.Clause) ([]*{{.Opts.EntityName}}, error) {
	tx := depot.MustGetTx(ctx)
	vals, err := tx.QueryMany({{lcFirst .Opts.RepoName}}Cols, {{lcFirst .Opts.RepoName}}Table, clauses...)
	if err != nil {
		err = fmt.Errorf("failed to load {{.Opts.EntityName}}: %w", err)
		tx.Error(err)
		return nil, err
	}

	res := make([]*{{.Opts.EntityName}}, 0, len(vals))
	for _, v := range vals {
		entity, err := r.fromValues(v)
		if err != nil {
			return nil, err
		}
		res = append(res, entity)
	}
	return res, nil
}

func (r *{{.Opts.RepoName}}) count(ctx context.Context, clauses ...query.WhereClause) (int, error) {
	tx := depot.MustGetTx(ctx)
	count, err := tx.QueryCount({{lcFirst .Opts.RepoName}}Table, clauses...)
	if err != nil {
		err = fmt.Errorf("failed to count {{.Opts.EntityName}}: %w", err)
		tx.Error(err)
		return 0, err
	}

	return count, err	
}

{{if $id := .Mapping.ID}}

	func (r *{{.Opts.RepoName}}) LoadBy{{$id.Field}}(ctx context.Context, {{$id.Field}} {{$id.Type.Expr}}) (*{{.Opts.EntityName}}, error) {
		tx := depot.MustGetTx(ctx)
		vals, err := tx.QueryOne({{lcFirst .Opts.RepoName}}Cols, {{lcFirst .Opts.RepoName}}Table, query.Where("{{$id.Column}}", {{$id.Field}}))
		if err != nil {
			err = fmt.Errorf("failed to load {{.Opts.EntityName}} by {{$id.Field}}: %w", err)
			if !errors.Is(err, depot.ErrNoResult) {
				tx.Error(err)
			}
			return nil, err
		}
		return r.fromValues(vals)
	}

{{end}}

{{if not .Opts.ReadOnly}}

	func (r *{{.Opts.RepoName}}) toValues(entity *{{.Opts.EntityName}}) depot.Values {
		return depot.Values{
			{{range .Mapping.Fields}}"{{.Column}}": entity.{{.Field}},
			{{end}}
		}
	}

	func (r *{{.Opts.RepoName}}) Insert(ctx context.Context, entity *{{.Opts.EntityName}}) error {
		tx := depot.MustGetTx(ctx)
		err := tx.InsertOne({{lcFirst .Opts.RepoName}}Table, r.toValues(entity))
		if err != nil {
			err = fmt.Errorf("failed to insert {{.Opts.EntityName}}: %w", err)
		}
		return err
	}

	func (r *{{.Opts.RepoName}}) delete(ctx context.Context, clauses... query.WhereClause) error {
		tx := depot.MustGetTx(ctx)
		err := tx.DeleteMany({{lcFirst .Opts.RepoName}}Table, clauses...)
		if err != nil {
			err = fmt.Errorf("failed to delete {{.Opts.EntityName}}: %w", err)
		}
		return err
	}

	{{if $id := .Mapping.ID}}

		func (r *{{.Opts.RepoName}}) Update(ctx context.Context, entity *{{.Opts.EntityName}}) error {
			tx := depot.MustGetTx(ctx)
			err := tx.UpdateMany({{lcFirst .Opts.RepoName}}Table, r.toValues(entity), query.Where("{{$id.Column}}", entity.{{$id.Field}}))
			if err != nil {
				err = fmt.Errorf("failed to update {{.Opts.EntityName}}: %w", err)
			}
			return err
		}

		func (r *{{.Opts.RepoName}}) DeleteBy{{$id.Field}}(ctx context.Context, {{$id.Field}} {{$id.Type.Expr}}) error {
			return r.delete(ctx, query.Where("{{$id.Column}}", {{$id.Field}}))
		}

		func (r *{{.Opts.RepoName}}) Delete(ctx context.Context, entity *{{.Opts.EntityName}}) error {
			return r.delete(ctx, query.Where("{{$id.Column}}", entity.{{$id.Field}}))
		}

	{{end}}
{{end}}
`
)

var (
	// repoTemplate is the compiled version of repoTemplateSrc.
	repoTemplate = template.Must(
		template.
			New("repo").
			Funcs(map[string]interface{}{
				"lcFirst": lcFirst,
				"toLower": strings.ToLower,
			}).Parse(repoTemplateSrc))
)

// lcfirst returns s with the first rune converted to lower case.
// lcfirst assumes that s is encoded as UTF8.
func lcFirst(s string) string {
	if len(s) == 0 {
		return s
	}

	r, l := utf8.DecodeRuneInString(s)
	return fmt.Sprintf("%c%s", unicode.ToLower(r), s[l:])
}

// generationModel is the type used to pass context data to
// the repo template.
type generationModel struct {
	Opts    *Options
	Mapping *StructMapping
}

// generateRepo generates the repo sources for the given mapping and options.
// it returns the generated bytes which are formatted and imports processed.
func generateRepo(mapping *StructMapping, options *Options) ([]byte, error) {
	var buf bytes.Buffer

	if err := repoTemplate.Execute(&buf, generationModel{
		Opts:    options,
		Mapping: mapping,
	}); err != nil {
		return nil, err
	}

	return imports.Process("gen-repo.go", buf.Bytes(), nil)
}
